// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TgBotParserAli.DB;

#nullable disable

namespace TgBotParserAli.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TgBotParserAli.Models.Admins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1451999567L,
                            UserName = "faust_harric"
                        },
                        new
                        {
                            Id = 2,
                            ChatId = 292720339L,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("TgBotParserAli.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FailedPosts")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxPostsPerDay")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParseCount")
                        .HasColumnType("integer");

                    b.Property<int>("ParsedCount")
                        .HasColumnType("integer");

                    b.Property<int>("PostedToday")
                        .HasColumnType("integer");

                    b.Property<string>("ReferralLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("UseShortLinks")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("TgBotParserAli.Models.KeywordSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsParsing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosting")
                        .HasColumnType("boolean");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ParseFrequency")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("PostFrequency")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("KeywordSettings");
                });

            modelBuilder.Entity("TgBotParserAli.Models.KeywordStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("KeywordStats");
                });

            modelBuilder.Entity("TgBotParserAli.Models.PostSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CaptionTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PriceTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitleTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UrlTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("PostSetting");
                });

            modelBuilder.Entity("TgBotParserAli.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("numeric");

                    b.PrimitiveCollection<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TgBotParserAli.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tokens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQyNTAwNDE3LCJ1c2VyX2lkIjo2OTQzNzksInVzZXJfcm9sZSI6InVzZXIiLCJjbGllbnRfcGxhdGZvcm0iOiJ3ZWIiLCJjbGllbnRfaXAiOiI5MS4yMzcuMTc5LjE4MSIsImNsaWVudF9pZCI6IjVDQmhqWTBQbXdxRzRFc2M5THlsSE9OdlNKdVVUN2lnIiwiY2hlY2tfaXAiOmZhbHNlLCJ0b2tlbiI6IjQ4NzFlZTcyZDhhNGU1OThlN2U1NDBkZWM0OTJhNjQwYWQyZmU0ZTIiLCJzY29wZSI6InVzZXJfaXNzdWVkX3Rva2VuIn0.mPDj2SyGctiRI1JVXE3w6cqm-EW4A2Cd-w-J8EabAlNExGAbNfGIquKtOiP-W_kQJMBKuCnIq3SUfMALBsjo9A",
                            ExpiresAt = new DateTime(2025, 3, 20, 22, 53, 37, 0, DateTimeKind.Utc),
                            RefreshToken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaF90b2tlbiIsImV4cCI6MTc0MzcxMDAxNywidG9rZW4iOiI3MjU5MDdkYjVhNTlhOWUwMmZiNzdkYWE1ZTgyZTk3M2E0MWI5NmM4IiwidXNlcl9pZCI6Njk0Mzc5LCJjbGllbnRfaXAiOiI5MS4yMzcuMTc5LjE4MSIsImNoZWNrX2lwIjpmYWxzZSwic2NvcGUiOiJ1c2VyX2lzc3VlZF90b2tlbiJ9.RxHuycPFS_oSZibp4TRdajaRH_8hrI43PyCHB-Qvpgnhn6BVWhrbE5q1w60UYsfzJQzW3QYtrJ1eYS4Iat8fjQ"
                        });
                });

            modelBuilder.Entity("TgBotParserAli.Models.KeywordSetting", b =>
                {
                    b.HasOne("TgBotParserAli.Models.Channel", "Channel")
                        .WithMany("KeywordSettings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("TgBotParserAli.Models.KeywordStat", b =>
                {
                    b.HasOne("TgBotParserAli.Models.Channel", "Channel")
                        .WithMany("KeywordStats")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("TgBotParserAli.Models.PostSettings", b =>
                {
                    b.HasOne("TgBotParserAli.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("TgBotParserAli.Models.Product", b =>
                {
                    b.HasOne("TgBotParserAli.Models.Channel", "Channel")
                        .WithMany("Products")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("TgBotParserAli.Models.Channel", b =>
                {
                    b.Navigation("KeywordSettings");

                    b.Navigation("KeywordStats");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
