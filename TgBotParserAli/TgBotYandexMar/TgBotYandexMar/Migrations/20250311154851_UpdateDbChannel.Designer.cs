// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TgBotYandexMar.DB;

#nullable disable

namespace TgBotYandexMar.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250311154851_UpdateDbChannel")]
    partial class UpdateDbChannel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TgBotYandexMar.Models.Admins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1451999567L,
                            UserName = "faust_harric"
                        },
                        new
                        {
                            Id = 2,
                            ChatId = 292720339L,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("TgBotYandexMar.Models.ChannekStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("FailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PostedCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelStats");
                });

            modelBuilder.Entity("TgBotYandexMar.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Clid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxPostsPerDay")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OAuthToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("OAuthTokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParseCount")
                        .HasColumnType("integer");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShowOpinionCount")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowRating")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseExactMatch")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseLowPrice")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("TgBotYandexMar.Models.KeywordSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ParseFrequency")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("PostFrequency")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("KeywordSettings");
                });

            modelBuilder.Entity("TgBotYandexMar.Models.KeywordStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("KeywordSettingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastParsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParsedCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KeywordSettingId");

                    b.ToTable("KeywordStats");
                });

            modelBuilder.Entity("TgBotYandexMar.Models.PostSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CaptionTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PriceTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShowOpinionCount")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowRating")
                        .HasColumnType("boolean");

                    b.Property<string>("TitleTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .IsUnique();

                    b.ToTable("PostSetting");
                });

            modelBuilder.Entity("TgBotYandexMar.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvgPrice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaxPrice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MinPrice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OpinionCount")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("Photos")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("PostedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TgBotYandexMar.Models.ChannekStat", b =>
                {
                    b.HasOne("TgBotYandexMar.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("TgBotYandexMar.Models.KeywordSetting", b =>
                {
                    b.HasOne("TgBotYandexMar.Models.Channel", "Channel")
                        .WithMany("KeywordSettings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("TgBotYandexMar.Models.KeywordStat", b =>
                {
                    b.HasOne("TgBotYandexMar.Models.KeywordSetting", "KeywordSetting")
                        .WithMany()
                        .HasForeignKey("KeywordSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeywordSetting");
                });

            modelBuilder.Entity("TgBotYandexMar.Models.PostSettings", b =>
                {
                    b.HasOne("TgBotYandexMar.Models.Channel", "Channel")
                        .WithOne("PostSettings")
                        .HasForeignKey("TgBotYandexMar.Models.PostSettings", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("TgBotYandexMar.Models.Product", b =>
                {
                    b.HasOne("TgBotYandexMar.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("TgBotYandexMar.Models.Channel", b =>
                {
                    b.Navigation("KeywordSettings");

                    b.Navigation("PostSettings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
